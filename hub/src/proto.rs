// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParamMessage {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(enumeration = "ValueTypeMessage", tag = "2")]
    pub r#type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceMessage {
    #[prost(string, tag = "1")]
    pub service_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub service_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub service_desc: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub params: ::prost::alloc::vec::Vec<ParamMessage>,
    #[prost(message, optional, tag = "5")]
    pub result: ::core::option::Option<ParamMessage>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeviceMessage {
    #[prost(string, tag = "1")]
    pub device_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub device_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub device_address: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub services: ::prost::alloc::vec::Vec<ServiceMessage>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeviceOnlineRequest {
    #[prost(message, optional, tag = "1")]
    pub device: ::core::option::Option<DeviceMessage>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeviceOfflineRequest {
    #[prost(string, tag = "1")]
    pub device_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncDeviceRequest {
    #[prost(message, optional, tag = "1")]
    pub empty: ::core::option::Option<()>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncDeviceResponse {
    #[prost(message, repeated, tag = "1")]
    pub devices: ::prost::alloc::vec::Vec<DeviceMessage>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeviceStatusPush {
    #[prost(string, repeated, tag = "1")]
    pub online_device_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "2")]
    pub offline_device_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ValueTypeMessage {
    Int = 0,
    Bool = 1,
    Double = 2,
    String = 3,
}
impl ValueTypeMessage {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ValueTypeMessage::Int => "INT",
            ValueTypeMessage::Bool => "BOOL",
            ValueTypeMessage::Double => "DOUBLE",
            ValueTypeMessage::String => "STRING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "INT" => Some(Self::Int),
            "BOOL" => Some(Self::Bool),
            "DOUBLE" => Some(Self::Double),
            "STRING" => Some(Self::String),
            _ => None,
        }
    }
}
